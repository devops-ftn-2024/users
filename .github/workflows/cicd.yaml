name: Integration & Delivery
run-name: Integration & Delivery triggered by ${{ github.actor }}

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - main

env:
  IMAGE_NAME: accommodatio-users

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and write Docker image to file
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        tags: ${{ env.IMAGE_NAME }}
        outputs: type=docker,dest=/tmp/image.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Save Docker image artifact for later use
      uses: actions/upload-artifact@v3
      with:
        name: image
        path: /tmp/image.tar

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Get Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: image
        path: /tmp
    
    - name: Load Docker image
      run: docker load -i /tmp/image.tar

    - name: Run unit tests
      run: docker run $IMAGE_NAME:latest npm run test

  integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Get Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: image
        path: /tmp
    
    - name: Load Docker image
      run: docker load -i /tmp/image.tar

    - name: Spin up required containers
      working-directory: tests
      run: docker compose up -d

    - name: Setup environment for running integration tests
      working-directory: tests
      run: pip install -r requirements.txt

    - name: Wait for the app service
      working-directory: tests
      run: |
        LOGS_SINCE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          fetch_logs() {
          docker compose logs --since "$LOGS_SINCE" $1
          LOGS_SINCE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        }
        echo "Waiting for the app service to start..."
        for i in {1..30}; do
          health=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q app) 2>/dev/null)
          if [ "$health" = "healthy" ]; then
            echo "SUCCESS: App service is healthy."
            exit 0
          fi
          echo "App service is $health... ($i/30)"
          fetch_logs app
          sleep 3
        done
        echo "App service failed to start."
        exit 1

    - name: Run integration tests
      working-directory: tests
      run: pytest integration.py --html=./report.html --self-contained-html

    - name: Save test results for manual inspection
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: tests/report.html

  release:
    name: Release and publish Docker image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Get Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: image
        path: /tmp
    
    - name: Load Docker image
      run: docker load -i /tmp/image.tar

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Tag new version on GitHub
      uses: cycjimmy/semantic-release-action@v4
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/github
            @semantic-release/git

    - name: Push Docker image to Docker Hub
      if: steps.release.outputs.new_release_published == 'true'
      env:
        RELEASE_VERSION: ${{ steps.release.outputs.new_release_version }}
      run: |
        docker tag $IMAGE_NAME ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$RELEASE_VERSION
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$RELEASE_VERSION
